{"version":3,"sources":["robots.js","Cards.js","Cardlist.js","Searchbar.js","scroll.js","App.js","serviceWorker.js","index.js"],"names":["robots","id","name","username","position","Cards","className","alt","src","CardArray","map","user","i","key","Searchbar","searchfield","searchChange","type","placeholder","onChange","Scroll","props","children","App","onSearchChange","event","setState","target","value","state","filteredRobots","this","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0RAAaA,EAAS,CACpB,CACEC,GAAI,EACJC,KAAM,eACNC,SAAU,OACVC,SAAU,gBAEZ,CACEH,GAAI,EACJC,KAAM,cACNC,SAAU,YACVC,SAAU,kBAEZ,CACEH,GAAI,EACJC,KAAM,aACNC,SAAU,WACVC,SAAU,aAEZ,CACEH,GAAI,EACJC,KAAM,QACNC,SAAU,WACVC,SAAU,eAEZ,CACEH,GAAI,EACJC,KAAM,UACNC,SAAU,SACVC,SAAU,oBAEZ,CACEH,GAAI,EACJC,KAAM,gBACNC,SAAU,mBACVC,SAAU,cAEZ,CACEH,GAAI,EACJC,KAAM,mBACNC,SAAU,eACVC,SAAU,eAEZ,CACEH,GAAI,EACJC,KAAM,kBACNC,SAAU,gBACVC,SAAU,2BAEZ,CACEH,GAAI,EACJC,KAAM,cACNC,SAAU,WACVC,SAAU,oBAEZ,CACEH,GAAI,GACJC,KAAM,kBACNC,SAAU,iBACVC,SAAU,oBAEZ,CACEH,GAAI,GACJC,KAAM,2BACNC,SAAU,iBACVC,SAAU,cAEZ,CACEH,GAAI,GACJC,KAAM,eACNC,SAAU,iBACVC,SAAU,oBAEZ,CACEH,GAAI,GACJC,KAAM,YACNC,SAAU,iBACVC,SAAU,eAEZ,CACEH,GAAI,GACJC,KAAM,kBACNC,SAAU,iBACVC,SAAU,sBAEZ,CACEH,GAAI,GACJC,KAAM,gBACNC,SAAU,iBACVC,SAAU,eAEZ,CACEH,GAAI,GACJC,KAAM,kBACNC,SAAU,iBACVC,SAAU,eAEZ,CACEH,GAAI,GACJC,KAAM,gBACNC,SAAU,iBACVC,SAAU,gBCvFCC,EAXD,SAAC,GAA2B,IAAzBH,EAAwB,EAAxBA,KAAME,EAAkB,EAAlBA,SAAUH,EAAQ,EAARA,GAC7B,OACI,yBAAKK,UAAU,uDACX,yBAAKC,IAAI,SAASC,IAAG,+BAA0BP,EAA1B,cACzB,6BACI,4BAAKC,GACL,2BAAIE,MCgBDK,EArBG,SAAC,GAAa,IAAZT,EAAW,EAAXA,OAChB,OACI,6BAEQA,EAAOU,KAAI,SAACC,EAAKC,GACb,OACI,kBAAC,EAAD,CACAC,IAAKD,EACLX,GAAID,EAAOY,GAAGX,GACdC,KAAMF,EAAOY,GAAGV,KAChBE,SAAUJ,EAAOY,GAAGR,gBCE7BU,EAdE,SAAC,GAA+B,EAA9BC,YAA+B,IAAlBC,EAAiB,EAAjBA,aAC5B,OACI,yBAAKV,UAAU,OACX,2BACIA,UAAU,mCACVJ,KAAK,YACLe,KAAK,OACLC,YAAY,iBACZC,SAAUH,MCCXI,G,MARA,SAACC,GACZ,OACI,yBAAKf,UAAU,UACVe,EAAMC,YC+BJC,G,wDA7Bb,aAAc,IAAD,8BACX,gBAOFC,eAAiB,SAACC,GAChB,EAAKC,SAAS,CAACX,YAAaU,EAAME,OAAOC,SAPzC,EAAKC,MAAQ,CACX7B,OAAOA,EACPe,YAAY,IAJH,E,qDAYH,IAAD,OACDe,EAAiBC,KAAKF,MAAM7B,OAAOgC,QAAQ,SAAAhC,GAC/C,OAAOA,EAAOE,KAAK+B,cAAcC,SAAS,EAAKL,MAAMd,YAAYkB,kBAErE,OACE,yBAAK3B,UAAU,MACb,wBAAIA,UAAU,MAAd,gBACA,kBAAC,EAAD,CAAWU,aAAce,KAAKP,iBAC9B,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAWxB,OAAQ8B,U,GAtBTK,c,MCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAAOC,SAASC,eAAe,SD4HzC,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9e6f4e1f.chunk.js","sourcesContent":["export const robots = [\n  {\n    id: 1,\n    name: 'Lionel Messi',\n    username: 'Bret',\n    position: 'Right-Winger'\n  },\n  {\n    id: 2,\n    name: 'Luis Suarez',\n    username: 'Antonette',\n    position: 'Center-Forword'\n  },\n  {\n    id: 3,\n    name: 'Jordi Alba',\n    username: 'Samantha',\n    position: 'Left-Back'\n  },\n  {\n    id: 4,\n    name: 'Pique',\n    username: 'Karianne',\n    position: 'Center-Back'\n  },\n  {\n    id: 5,\n    name: 'Rakitic',\n    username: 'Kamren',\n    position: 'Central Midfield'\n  },\n  {\n    id: 6,\n    name: 'Nelson Semedo',\n    username: 'Leopoldo_Corkery',\n    position: 'Right-back'\n  },\n  {\n    id: 7,\n    name: 'Antoine Griezmen',\n    username: 'Elwyn.Skiles',\n    position: 'Left-Winger'\n  },\n  {\n    id: 8,\n    name: 'Ousmane Dembele',\n    username: 'Maxime_Nienow',\n    position: 'Right Winger/LeftWinger'\n  },\n  {\n    id: 9,\n    name: 'Arthur Melo',\n    username: 'Delphine',\n    position: 'Central Midfield'\n  },\n  {\n    id: 10,\n    name: 'Frankie de Jong',\n    username: 'Moriah.Stanton',\n    position: 'Central Midfield'\n  },\n  {\n    id: 11,\n    name: 'Marc-AndrÃ© ter Stegen',\n    username: 'Moriah.Stanton',\n    position: 'GoalKeeper'\n  },\n  {\n    id: 12,\n    name: 'Arturo Vidal',\n    username: 'Moriah.Stanton',\n    position: 'Central Midfield'\n  },\n  {\n    id: 13,\n    name: 'Ansu Fati',\n    username: 'Moriah.Stanton',\n    position: 'Left-winger'\n  },\n  {\n    id: 14,\n    name: 'Sergio Busquets',\n    username: 'Moriah.Stanton',\n    position: 'Defensive Midfield'\n  },\n  {\n    id: 15,\n    name: 'Samuel Umtiti',\n    username: 'Moriah.Stanton',\n    position: 'Center-Back'\n  },\n  {\n    id: 16,\n    name: 'Clemnet Lenglet',\n    username: 'Moriah.Stanton',\n    position: 'Center-Back'\n  },\n  {\n    id: 17,\n    name: 'Samuel Umtiti',\n    username: 'Moriah.Stanton',\n    position: 'Center-Back'\n  },\n];\n","import React from 'react';\r\nimport './robots';\r\n\r\nconst Cards = ({ name, position, id}) => {\r\n    return(\r\n        <div className='tc bg-light-green dib br2 pa2 ma2 grow bw2 shadow-5'>\r\n            <img alt='robots' src={`https://robohash.org/${id}?100x100`}/>\r\n        <div>\r\n            <h2>{name}</h2>\r\n            <p>{position}</p>\r\n        </div>\r\n        </div>\r\n    );\r\n}\r\nexport default Cards;","import React from 'react';\r\nimport Cards from './Cards';\r\nimport {robots} from './robots';\r\n\r\nconst CardArray = ({robots}) =>{\r\n    return(\r\n        <div>\r\n            {\r\n                robots.map((user,i) => {\r\n                    return(\r\n                        <Cards\r\n                        key={i}\r\n                        id={robots[i].id}\r\n                        name={robots[i].name}\r\n                        position={robots[i].position}\r\n                        />\r\n                    )\r\n                })\r\n            }    \r\n        </div>\r\n        \r\n        )\r\n}\r\n\r\n\r\nexport default CardArray;","import React from 'react';\r\n\r\nconst Searchbar =({searchfield, searchChange}) =>{\r\n    return(\r\n        <div className=\"pa2\">\r\n            <input \r\n                className='pa2 ba b--green bg-lightest-blue' \r\n                name='searchbar' \r\n                type='text' \r\n                placeholder='Search Players'\r\n                onChange={searchChange}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Searchbar;","import React from 'react';\r\nimport './scroll.css'\r\n\r\nconst Scroll = (props) => {\r\n    return(\r\n        <div className=\"scroll\">\r\n            {props.children}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\nimport CardArray from './Cardlist';\nimport {robots} from './robots';\nimport Searchbar from './Searchbar';\nimport Scroll from './scroll'\nimport './App.css';\n\nclass App extends Component {\n  constructor(){\n    super()\n    this.state = {\n      robots:robots,\n      searchfield:''\n    }\n  }\n\n  onSearchChange = (event)=> {\n    this.setState({searchfield: event.target.value})\n}\n\n  render() {\n    const filteredRobots = this.state.robots.filter( robots =>{\n      return robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase())\n    })\n  return(\n    <div className='tc'>\n      <h1 className=\"f1\">FC Barcelona</h1>\n      <Searchbar searchChange={this.onSearchChange}/>\n      <Scroll>\n        <CardArray robots={filteredRobots}/>\n      </Scroll>  \n    </div>\n  )\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'tachyons';\nimport App from './App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>,document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}